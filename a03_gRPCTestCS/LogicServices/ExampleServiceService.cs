//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace com.example
{
    
    
    public partial class GrpcDecimal
    {
        
        private const decimal NanoFactor = 1_000_000_000;
        
        private GrpcDecimal(long units, int nanos)
        {
            Units = units;
            Nanos = nanos;
        }
        
        public static implicit operator  decimal(GrpcDecimal grpcDecimal)
        {
            return grpcDecimal.Units + grpcDecimal.Nanos / NanoFactor;
        }
        
        public static implicit operator GrpcDecimal(decimal value)
        {
            var units = decimal.ToInt64(value);
            var nanos = decimal.ToInt32((value - units) * NanoFactor);
            return new GrpcDecimal(units, nanos);
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace com.example
{
    using System;
    using System.Data;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Grpc.Core;
    using Microsoft.Extensions.Logging;
    using Google.Protobuf.WellKnownTypes;
    using GrpcSecurity;
    using SoftBand.EntityManager;
    
    
    [BindService(typeof(ExampleService), "BindService")]
    public partial class ExampleServiceService : ExampleService.ExampleServiceBase
    {
        
        private readonly ILogger<ExampleServiceService> _logger;
        
        public ExampleServiceService(ILogger<ExampleServiceService> logger)
        {
            _logger = logger;
        }
        
        public override async Task<ExampleResponse> UnaryCall(ExampleRequest request, ServerCallContext context)
        {
            ExampleResponse response = new ExampleResponse();
            //try
            //{
            //    response = await ExampleServiceLogic.UnaryCallAsync(request);
            //}
            //catch (System.Exception )
            //{
            //    throw;
            //}

            response.Result = "OK";
            return response;
        }
        
        public override async Task StreamimgFromServer(ExampleRequest request, IServerStreamWriter<ExampleResponse> responseStream, ServerCallContext context)
        {
            ExampleResponse response = new ExampleResponse();
            int sendcCount = 10;
            // while (!context.CancellationToken.IsCancellationRequested)
            for (; !context.CancellationToken.IsCancellationRequested; )
            {
                try
                {
                    if (sendcCount-- == 0)
                        request.PageIndex = -1;
                    response = await ExampleServiceLogic.StreamimgFromServerAsync(request);
                    if (response == null)
                        break;
                }
                catch (System.Exception )
                {
                    throw;
                }
                await responseStream.WriteAsync(response);
                await Task.Delay(TimeSpan.FromMilliseconds(100), context.CancellationToken);
            }
        }
        
        public override async Task<ExampleResponse> StreamingFromClient(IAsyncStreamReader<ExampleRequest> requestStream, ServerCallContext context)
        {
            ExampleResponse response = new ExampleResponse();
            // while( requestStream.MoveNext());
            for (; await requestStream.MoveNext(); )
            {
                ExampleRequest request = requestStream.Current;
                try
                {
                    ExampleResponse response2 = await ExampleServiceLogic.StreamingFromClientAsync(request);
                    // reponse2 를 사용하여 response Message를 만든다
                }
                catch (System.Exception )
                {
                    throw;
                }
            }

            response.Result = "Call OK";
            return response;
        }
        
        public override async Task StreamingBothways(IAsyncStreamReader<ExampleRequest> requestStream, IServerStreamWriter<ExampleResponse> responseStream, ServerCallContext context)
        {
            // Read requests in a background task.
            var readTask = Task.Run(async () =>
            {
                await foreach (var request in requestStream.ReadAllAsync())
                {
                     // Process request
                     await this.StreamingBothways_BidirectionalRequest(request);
                }
            });

            // Send responses until the client signals that it is complete.
            // while(true);

            int sendCount = 10;
            for (;  true; )
            {
                ExampleResponse response = await this.StreamingBothways_BidirectionalResponse();
                if ((response == null || sendCount-- == 0))
                {
                    // the end
                     break;
                }
                response.Result = "Call OK";
                await responseStream.WriteAsync(response);
                await Task.Delay(TimeSpan.FromMilliseconds(100), context.CancellationToken);
            }
        }
        
        public async Task StreamingBothways_BidirectionalRequest(ExampleRequest request)
        {
            // The ExampleRequest have to processing 
        }
        
        public async Task<ExampleResponse> StreamingBothways_BidirectionalResponse()
        {
            ExampleResponse response = new ExampleResponse();
            // you have to make StreamingBothwaysResponse message
            return response;
        }
    }
}
