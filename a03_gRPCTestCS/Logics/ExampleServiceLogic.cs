//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace com.example
{
    using System;
    using System.Runtime.Serialization;
    using System.Data;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using System.Transactions;
    using SoftBand.EntityManager;
    
    
    public partial class ExampleServiceLogic
    {
        
        public static ExampleServiceLogicService _exampleServiceLogicService;
        
        public static ExampleServiceLogicService Service
        {
            get
            {
                if ((_exampleServiceLogicService == null))
                {
                    _exampleServiceLogicService = new ExampleServiceLogicService();
                }
                return _exampleServiceLogicService;
            }
        }
        
        public static async Task<ExampleResponse> UnaryCallAsync(ExampleRequest request)
        {
            return await Service.UnaryCallAsync(request);
        }
        
        public static async Task<ExampleResponse> StreamimgFromServerAsync(ExampleRequest request)
        {
            return await Service.StreamimgFromServerAsync(request);
        }
        
        public static async Task<ExampleResponse> StreamingFromClientAsync(ExampleRequest request)
        {
            return await Service.StreamingFromClientAsync(request);
        }
        
        public static async Task<ExampleResponse> StreamingBothwaysAsync(ExampleRequest request)
        {
            return await Service.StreamingBothwaysAsync(request);
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace com.example
{
    using System;
    using System.Runtime.Serialization;
    using System.Data;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using System.Transactions;
    using SoftBand.EntityManager;
    
    
    public partial interface IExampleServiceLogic
    {
        
        Task<ExampleResponse> UnaryCallAsync(ExampleRequest request);
        
        Task<ExampleResponse> StreamimgFromServerAsync(ExampleRequest request);
        
        Task<ExampleResponse> StreamingFromClientAsync(ExampleRequest request);
        
        Task<ExampleResponse> StreamingBothwaysAsync(ExampleRequest request);
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace com.example
{
    using System;
    using System.Runtime.Serialization;
    using System.Data;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using System.Transactions;
    using SoftBand.EntityManager;
    
    
    public partial class ExampleServiceLogicService : IExampleServiceLogic
    {
        
        public async Task<ExampleResponse> UnaryCallAsync(ExampleRequest request)
        {
            ExampleResponse response = new ExampleResponse();
            TransactionOptions options = new TransactionOptions();
            options.IsolationLevel = System.Transactions.IsolationLevel.RepeatableRead;
            options.Timeout = new TimeSpan(0, 0, 30);
            System.Transactions.TransactionScope scope = new TransactionScope(TransactionScopeOption.RequiresNew, options);
            try
            {
                // Write your business logic code here.


                scope.Complete();
            }
            catch (System.Exception )
            {
                scope.Dispose();
                throw;
            }
            finally
            {
                scope.Dispose();
            }
            return response;
        }
        
        public async Task<ExampleResponse> StreamimgFromServerAsync(ExampleRequest request)
        {
            ExampleResponse response = new ExampleResponse();
            TransactionOptions options = new TransactionOptions();
            options.IsolationLevel = System.Transactions.IsolationLevel.RepeatableRead;
            options.Timeout = new TimeSpan(0, 0, 30);
            System.Transactions.TransactionScope scope = new TransactionScope(TransactionScopeOption.RequiresNew, options);
            try
            {
                // Write your business logic code here.
                if (request.PageIndex == -1)
                    return null;
                response.Result = "Call Ok";

                scope.Complete();
            }
            catch (System.Exception )
            {
                scope.Dispose();
                throw;
            }
            finally
            {
                scope.Dispose();
            }
            return response;
        }
        
        public async Task<ExampleResponse> StreamingFromClientAsync(ExampleRequest request)
        {
            ExampleResponse response = new ExampleResponse();
            TransactionOptions options = new TransactionOptions();
            options.IsolationLevel = System.Transactions.IsolationLevel.RepeatableRead;
            options.Timeout = new TimeSpan(0, 0, 30);
            System.Transactions.TransactionScope scope = new TransactionScope(TransactionScopeOption.RequiresNew, options);
            try
            {
                // Write your business logic code here.


                scope.Complete();
            }
            catch (System.Exception )
            {
                scope.Dispose();
                throw;
            }
            finally
            {
                scope.Dispose();
            }
            return response;
        }
        
        public async Task<ExampleResponse> StreamingBothwaysAsync(ExampleRequest request)
        {
            ExampleResponse response = new ExampleResponse();
            TransactionOptions options = new TransactionOptions();
            options.IsolationLevel = System.Transactions.IsolationLevel.RepeatableRead;
            options.Timeout = new TimeSpan(0, 0, 30);
            System.Transactions.TransactionScope scope = new TransactionScope(TransactionScopeOption.RequiresNew, options);
            try
            {
                // Write your business logic code here.


                scope.Complete();
            }
            catch (System.Exception )
            {
                scope.Dispose();
                throw;
            }
            finally
            {
                scope.Dispose();
            }
            return response;
        }
    }
}
